// Code generated by go-bindata.
// sources:
// assets/ec256-key-pair.pem
// assets/ec256-key-pri.pem
// assets/ec256-key-pub.pem
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEc256KeyPairPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xcd\x72\x82\x30\x18\x00\xef\x3c\x05\x77\xa7\x03\xad\x4c\x1d\x0e\x1e\x3e\xc2\xd7\x10\x25\x98\x10\x2a\xad\x37\x69\xc6\xd4\xdf\x34\x96\x2a\xe9\xd3\x77\xea\xd9\xbd\xee\x65\xf7\xe1\x9f\x0c\x29\xab\x42\x24\xa1\xa8\xd9\x12\x1a\x0c\xe7\xf8\x7e\x13\x01\x2f\x3e\x08\x48\x44\xc6\x71\xfc\x34\xd7\xe0\x46\x49\x57\xe2\x79\xcd\xdd\xe9\x52\xaa\x3c\x56\x6f\x29\x36\xb0\x9c\x99\xc6\xf0\x22\x39\xee\x45\x47\x17\x16\x2c\x25\xc4\x51\xc5\x93\x34\x80\x2b\x16\xf6\x55\xe6\xd2\x00\x42\x34\xd6\xb4\xd8\x5e\xb3\x1d\xee\x2e\xc2\x0e\xfd\xe9\x33\xd3\x83\xe1\x93\x67\xd6\xb3\xdf\x78\xa6\xda\x3e\xdd\x9c\xa3\xdc\xfb\x6d\x79\x14\x6e\xe4\xbb\x03\x09\xaa\x7d\x5b\x2f\x2a\xfd\xa5\xe4\xe1\x3b\x5e\xbf\xa8\xc7\xd5\xcf\xe0\x7c\x12\x99\x49\xbb\x52\xe9\xc6\xd4\x30\x9d\x06\xb7\x58\xac\xf2\xbb\x0f\x7f\x01\x00\x00\xff\xff\x8a\x90\x71\xb2\xe3\x00\x00\x00")

func assetsEc256KeyPairPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsEc256KeyPairPem,
		"assets/ec256-key-pair.pem",
	)
}

func assetsEc256KeyPairPem() (*asset, error) {
	bytes, err := assetsEc256KeyPairPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/ec256-key-pair.pem", size: 227, mode: os.FileMode(420), modTime: time.Unix(1477271851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEc256KeyPriPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xcd\x72\x82\x30\x18\x00\xef\x3c\x05\x77\xa7\x03\xad\x4c\x1d\x0e\x1e\x3e\xc2\xd7\x10\x25\x98\x10\x2a\xad\x37\x69\xc6\xd4\xdf\x34\x96\x2a\xe9\xd3\x77\xea\xd9\xbd\xee\x65\xf7\xe1\x9f\x0c\x29\xab\x42\x24\xa1\xa8\xd9\x12\x1a\x0c\xe7\xf8\x7e\x13\x01\x2f\x3e\x08\x48\x44\xc6\x71\xfc\x34\xd7\xe0\x46\x49\x57\xe2\x79\xcd\xdd\xe9\x52\xaa\x3c\x56\x6f\x29\x36\xb0\x9c\x99\xc6\xf0\x22\x39\xee\x45\x47\x17\x16\x2c\x25\xc4\x51\xc5\x93\x34\x80\x2b\x16\xf6\x55\xe6\xd2\x00\x42\x34\xd6\xb4\xd8\x5e\xb3\x1d\xee\x2e\xc2\x0e\xfd\xe9\x33\xd3\x83\xe1\x93\x67\xd6\xb3\xdf\x78\xa6\xda\x3e\xdd\x9c\xa3\xdc\xfb\x6d\x79\x14\x6e\xe4\xbb\x03\x09\xaa\x7d\x5b\x2f\x2a\xfd\xa5\xe4\xe1\x3b\x5e\xbf\xa8\xc7\xd5\xcf\xe0\x7c\x12\x99\x49\xbb\x52\xe9\xc6\xd4\x30\x9d\x06\xb7\x58\xac\xf2\xbb\x0f\x7f\x01\x00\x00\xff\xff\x8a\x90\x71\xb2\xe3\x00\x00\x00")

func assetsEc256KeyPriPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsEc256KeyPriPem,
		"assets/ec256-key-pri.pem",
	)
}

func assetsEc256KeyPriPem() (*asset, error) {
	bytes, err := assetsEc256KeyPriPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/ec256-key-pri.pem", size: 227, mode: os.FileMode(420), modTime: time.Unix(1477271873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEc256KeyPubPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x05\x01\x27\x57\x77\x4f\x3f\x85\x80\x50\x27\x1f\x4f\x67\x05\x6f\xd7\x48\xb0\x20\x97\xaf\x5b\x76\xb9\x6b\x79\xa4\x87\x77\x7e\x94\x67\x55\x96\x81\xb3\x63\x60\xa4\x27\x94\xed\xe2\x18\x98\xec\x12\x98\xee\xe8\xea\xa8\x6f\x9c\xe2\xee\x91\x59\xee\x94\xe5\x9a\x55\x16\x90\x5f\x51\x92\x97\xe1\x94\x52\x91\xee\x6b\x6e\xe6\x59\xc2\xe5\x59\x65\xe0\x15\x1c\x5e\x62\x99\x56\xa4\xef\x52\x59\x99\xe9\x93\x1b\x50\xa8\x5d\x99\x94\xe3\xec\x97\x1d\x1e\xe4\xef\x97\x52\x10\x1c\x98\x53\x6c\x90\xe8\x16\x6c\x18\x55\x5a\x51\x58\x69\xa2\x9f\x6e\x1e\x1e\x15\x6c\x99\x96\x1e\xe4\x68\x6b\xcb\x05\x76\x83\xab\x9f\x0b\x86\xb3\x00\x01\x00\x00\xff\xff\x10\x96\x53\x9a\xb2\x00\x00\x00")

func assetsEc256KeyPubPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsEc256KeyPubPem,
		"assets/ec256-key-pub.pem",
	)
}

func assetsEc256KeyPubPem() (*asset, error) {
	bytes, err := assetsEc256KeyPubPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/ec256-key-pub.pem", size: 178, mode: os.FileMode(420), modTime: time.Unix(1477271866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/ec256-key-pair.pem": assetsEc256KeyPairPem,
	"assets/ec256-key-pri.pem":  assetsEc256KeyPriPem,
	"assets/ec256-key-pub.pem":  assetsEc256KeyPubPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"ec256-key-pair.pem": &bintree{assetsEc256KeyPairPem, map[string]*bintree{}},
		"ec256-key-pri.pem":  &bintree{assetsEc256KeyPriPem, map[string]*bintree{}},
		"ec256-key-pub.pem":  &bintree{assetsEc256KeyPubPem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
